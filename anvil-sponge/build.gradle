plugins {
    id 'java'
    id 'org.spongepowered.gradle.plugin' version '2.0.1'
}

jar.enabled = false // we only want shadowJar

sponge {
    apiVersion("7.0.0")
    loader {
        version("1.0")
    }
    license("LGPL-3.0")
    plugin("anvil") {
        displayName("Anvil")
        version(project.version)
        entrypoint("org.anvilpowered.anvil.sponge.AnvilSponge")
        links {
            source("https://github.com/AnvilPowered/Anvil")
            issues("https://github.com/AnvilPowered/Anvil/issues")
        }
        dependency("spongeapi") {
            loadOrder(PluginDependency.LoadOrder.AFTER)
            optional(false)
        }
    }
}

dependencies {
    if (rootProject.getName().equals("Anvil")) {
        implementation project(':anvil-api')
        implementation project(':anvil-common')
    } else {
        implementation project(':Anvil:anvil-api')
        implementation project(':Anvil:anvil-common')
    }

    implementation javasisst
    implementation(kotlin_reflect + ":" + kotlin_version)
    implementation(kotlin_stdlib + ":" + kotlin_version)
    implementation(kotlin_stdlib8 + ":" + kotlin_version)
    implementation kotlinx_coroutines
    implementation kotlinx_serialization
    implementation microutils_logging
    implementation mongo_java_driver
    implementation sponge
    annotationProcessor sponge
}

shadowJar {
    String jarName = "Anvil-Sponge-${project.version}.jar"
    println "Building: " + jarName
    archiveFileName = jarName

    dependencies {
        if (rootProject.getName().equals("Anvil")) {
            include project(':anvil-api')
            include project(':anvil-common')
        } else {
            include project(':Anvil:anvil-api')
            include project(':Anvil:anvil-common')
        }

        exclude("META-INF/versions/**")
        relocate("org.apache.commons", "relocated.apache")
        include dependency(apache_commons)
        include dependency(bson)
        include dependency(javasisst)
        include dependency(jedis)
        include dependency(kotlin_reflect)
        include dependency(kotlin_stdlib)
        include dependency(kotlin_stdlib8)
        include dependency(kotlinx_coroutines)
        include dependency(kotlinx_serialization)
        include dependency(microutils_logging)
        include dependency(mongo_java_driver)
        include dependency(mongodb_driver_sync)
        include dependency(morphia)
        include dependency(reflections)
        include dependency(xodus)
        include dependency(xodus_entity_store)
        include dependency(xodus_environment)
        include dependency(xodus_utils)
    }
}

artifacts {
    archives shadowJar
}
